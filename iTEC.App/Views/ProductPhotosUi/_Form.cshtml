
@using API.Base.Web.Base.Extensions.HtmlHelpers
@inject API.Base.Web.Base.Database.DataLayer.IDataLayer DataLayer
@model iTEC.App.Product.ProductPhoto.ProductPhotoEntity

<div>
        <div class="form-group">
            @Html.LabelFor(model => model.File)

@{
var fieldGuidFile = Html.RandomId();
}
<input asp-for="File.Id" class="form-control setting_value_input" id="file-field-@(fieldGuidFile)" readonly/>
@{
await Html.RenderBlindPartialAsync("~/Views/FileUi/_FileField.cshtml", Model?.File, 
 new ViewDataDictionary(ViewData) {{"input", "#file-field-" + fieldGuidFile}});
}

            @Html.DescriptionFor(model => model.File)
            @Html.ValidationMessageFor(model => model.File, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Product)

<select asp-for="Product.Id" 
asp-items="(await DataLayer.Repo<iTEC.App.Product.ProductEntity>().GetAll()).Select(p => new SelectListItem(p.ToString(), p.Id))" 
class="form-control">
                <option selected="selected" value="">Please select</option>
 </select>
            @Html.DescriptionFor(model => model.Product)
            @Html.ValidationMessageFor(model => model.Product, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.IsThumbnail)

@Html.EditorFor(model => model.IsThumbnail, new { htmlAttributes = new { @class = "form-control" }})
            @Html.DescriptionFor(model => model.IsThumbnail)
            @Html.ValidationMessageFor(model => model.IsThumbnail, "", new { @class = "text-danger" })
        </div>
</div>